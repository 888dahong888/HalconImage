using HalconDotNet;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Threading;

namespace OpenCamera
{
    /// <summary>
    /// MainWindow.xaml 的交互逻辑
    /// </summary>
    public partial class MainWindow : Window
    {
        public HTuple hv_AcqHandle = null;
        public HTuple hv_WindowHandle = null;
        public HObject ho_Image=null;
        public HTuple hv_Height = new HTuple();
        public HTuple hv_Width = new HTuple();
        public DispatcherTimer timer;
        public MainWindow()
        {
            InitializeComponent();
            timer = new DispatcherTimer();
            timer.Interval = TimeSpan.FromMilliseconds(20);
            timer.Tick += Timer_Tick;
        }

        private void Timer_Tick(object sender, EventArgs e)
        {
            ho_Image.Dispose();
            HOperatorSet.GrabImageAsync(out ho_Image, hv_AcqHandle, -1);
            //Image Acquisition 01: Do something
            HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);
            Console.WriteLine($"{hv_Width},{hv_Height}");
            if (HDevWindowStack.IsOpen())
            {
                HOperatorSet.SetPart(HDevWindowStack.GetActive(), 0, 0, hv_Height, hv_Width);
                HOperatorSet.DispObj(ho_Image, HDevWindowStack.GetActive());
            } 
        }

        private void BtnOpenCamera_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                HOperatorSet.GenEmptyObj(out ho_Image);
                //Image Acquisition 01: Code generated by Image Acquisition 01
                HOperatorSet.OpenFramegrabber("DirectShow", 1, 1, 0, 0, 0, 0, "default", 8, "rgb",
                    -1, "false", "default", "[1] 3D Webcam", 0, -1, out hv_AcqHandle);
                HOperatorSet.SetFramegrabberParam(hv_AcqHandle, "grab_timeout", 2000);
                HOperatorSet.GrabImageStart(hv_AcqHandle, -1);
                HOperatorSet.GenEmptyObj(out ho_Image);
                Console.WriteLine("相机打开成功");
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
            }
            

        }

        private void BtnCollection_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                timer.Start();
                timer.IsEnabled = true;
                HOperatorSet.SetWindowAttr("background_color", "black");
                HOperatorSet.OpenWindow(0, 0, HWCCameraImage.Width, HWCCameraImage.Height, HWCCameraImage.HalconWindow, "", "", out hv_WindowHandle);
                HDevWindowStack.Push(hv_WindowHandle);
                Console.WriteLine("开始采集");
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
            }
            
        }

        private void BtnCloseCamera_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                timer.Stop();
                timer.IsEnabled = false;
                HOperatorSet.CloseFramegrabber(hv_AcqHandle);
                ho_Image.Dispose();
                
                Console.WriteLine("关闭相机");
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
            }
            
        }
    }
}
